
    function getLocation() {
      const output = document.getElementById("location-message");
      const cards = document.getElementById("cards-container");

      if (!navigator.geolocation) {
        output.textContent = "Geolocation is not supported by your browser.";
        return;
      }

      output.textContent = "Fetching your location...";

      navigator.geolocation.getCurrentPosition(success, error);

      function success(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        const url = `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`;

        fetch(url, {
          headers: {
            "User-Agent": "NirogkaayaHealthApp/1.0"
          }
        })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            const address = data.display_name;
            output.innerHTML = `ЁЯУН Your Location:<br><strong>${address}</strong><br><br>Please register below to continue.`;
            cards.style.display = "flex";
            if (data.address && data.address.country_code === 'in') {
              translatePage('hi');
            }
          })
          .catch(e => {
            output.textContent = `Could not fetch address. Error: ${e.message}`;
          });
      }

      function error(err) {
        let message = '';
        switch (err.code) {
          case err.PERMISSION_DENIED:
            message = "User denied the request for Geolocation.";
            break;
          case err.POSITION_UNAVAILABLE:
            message = "Location information is unavailable.";
            break;
          case err.TIMEOUT:
            message = "The request to get user location timed out.";
            break;
          case err.UNKNOWN_ERROR:
            message = "An unknown error occurred.";
            break;
        }
        output.textContent = message;
      }
      
    }
  const images = [
    "./resource/Dr1.jpg",
    "./resource/Dr2.jpg",
    "./resource/Dr4.jpg",
  ];

  let currentIndex = 0;
  const imgElement = document.getElementById("slideshow-img");

  function showNextImage() {
    currentIndex = (currentIndex + 1) % images.length;
    imgElement.style.opacity = 0;
    setTimeout(() => {
      imgElement.src = images[currentIndex];
      imgElement.style.opacity = 1;
    }, 500); // fade-out time
  }

  setInterval(showNextImage, 3000); // Change image every 3 seconds

const videoCallModal = document.getElementById('video-call-modal');

function openDoctorConnectModal() {
  videoCallModal.style.display = 'block';
}

function closeVideoCallModal() {
  videoCallModal.style.display = 'none';
}

window.addEventListener('click', function(event) {
  if (event.target == videoCallModal) {
    closeVideoCallModal();
  }
});

const translations = {
  hi: {
    detect_location: 'ЁЯУН рдореЗрд░рд╛ рд╕реНрдерд╛рди рдкрд╣рдЪрд╛рдиреЗрдВ',
    hero_title: 'рдЧреНрд░рд╛рдореАрдг рднрд╛рд░рдд рдХреЗ рд▓рд┐рдП рдбреЙрдХреНрдЯрд░',
    hero_subtitle: 'рд╕реНрдорд╛рд░реНрдЯ рд╕рдВрдЬреАрд╡рдиреА - рд╕рднреА рдХреЗ рд▓рд┐рдП рдХрд▓реНрдпрд╛рдг',
    feature_time: 'ЁЯХТ рдЖрдкрдХрд╛ рд╕рдордп рдмрдЪрд╛рддрд╛ рд╣реИ',
    feature_fingertips: 'ЁЯТм рдбреЙрдХреНрдЯрд░ рдЖрдкрдХреА рдЙрдВрдЧрд▓рд┐рдпреЛрдВ рдкрд░',
    feature_prescription: 'ЁЯУД рдЕрдкрдирд╛ рдкрд░реНрдЪрд╛ рдСрдирд▓рд╛рдЗрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
    connect_doctor: 'рдбреЙрдХреНрдЯрд░ рд╕реЗ рдЬреБрдбрд╝реЗрдВ',
    book_safar: 'рд╕рдлрд░-рдП-рд╕реЗрд╣рдд рдмреБрдХ рдХрд░реЗрдВ',
    location_message: 'рд╣рдореЗрдВ рдЖрдкрдХреЗ рд╕реНрдерд╛рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП <br> рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ',
    register_doctor: 'рдбреЙрдХреНрдЯрд░ рдХреЗ рд░реВрдк рдореЗрдВ рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ',
    find_doctor: 'ЁЯЩЛ рдПрдХ рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреЗрдВ',
    villages_covering: 'рдЧрд╛рдВрд╡реЛрдВ рдХреЛ рдХрд╡рд░ рдХрд░рдирд╛',
    consultations: 'рдкрд░рд╛рдорд░реНрд╢',
    specialist_doctors: 'рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдбреЙрдХреНрдЯрд░ рдЯреАрдо',
    confidential_title: '100% рдЧреЛрдкрдиреАрдп',
    confidential_text: 'рд╕рднреА рдкрд░рд╛рдорд░реНрд╢ рдирд┐рдЬреА рдФрд░ рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИрдВред рдЖрдк рдХрднреА рднреА рдЪреИрдЯ рд╣рдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВред',
    certified_doctors_title: 'рдкреНрд░рдорд╛рдгрд┐рдд рдбреЙрдХреНрдЯрд░',
    certified_doctors_text: 'рдкреВрд░реЗ рднрд╛рд░рдд рдореЗрдВ рдЖрдкрдХреА рд╕реЗрд╡рд╛ рдореЗрдВ рдЕрдиреБрднрд╡реА рдФрд░ рдкреНрд░рдорд╛рдгрд┐рдд рдкреЗрд╢реЗрд╡рд░ред',
    saves_money_title: 'рдкреИрд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИ рдФрд░ рдореБрдлреНрдд рдкрд░рд╛рдорд░реНрд╢',
    saves_money_text: 'рдХрднреА рднреА, рдХрд╣реАрдВ рднреА рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред рдХреЛрдИ рдХрддрд╛рд░ рдирд╣реАрдВ, рдХреЛрдИ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрдХреНрд╖ рдирд╣реАрдВ, рдмрд╕ рджреЗрдЦрднрд╛рд▓ред',
    ayushmaan_card_title: 'рдЖрдпреБрд╖реНрдорд╛рди рдХрд╛рд░реНрдб',
    ayushmaan_card_text: 'рдЖрдпреБрд╖реНрдорд╛рди рдХрд╛рд░реНрдб рдзрд╛рд░рдХреЛрдВ рдХреЗ рд▓рд┐рдП рджрд╡рд╛ рдФрд░ рдореБрдлреНрдд рдкрд░рд╛рдорд░реНрд╢ред',
  }
};

function translatePage(language) {
  document.querySelectorAll('[data-translate-key]').forEach(element => {
    const key = element.getAttribute('data-translate-key');
    if (translations[language] && translations[language][key]) {
      element.innerHTML = translations[language][key];
    }
  });
}